Большую часть работы можно переложить на вспомогательные инструменты:

        форматирование кода — Terraform fmt;
        валидация кода команд — Terraform validate;
        генерации документации — Terraform-docs;
        проверки на удовлетворение соглашений и конвенций — tflint;
        сканирование статическими анализаторами кода на уязвимости — Checkov.


По возможности отдавайте работу с линтерами в Continuous Integration (CI)
(тему CI мы рассмотрим в отдельном модуле немного позже).
Если вы ещё не готовы для отношений с CI, то необходимо выполнять проверку на локальном компьютере.

Это поможет:

        следовать конвенциям;
        снизить порог вхождения для коллег;
        снизить количество времени для подготовки окружения;
        снизить человеческий фактор;
        увеличить скорость деплоя.

Если вы хотите сделать Terraform-код более надежным, безопасным,
то рекомендуем рассмотреть список наиболее популярных и полезных инструментов для работы с Terraform:

        pre-commit Terraform — это набор git-хуков (гит позволяет вызывать автоматические действия при различных операциях с гит, например при коммите) для работы с Terraform.
        Terrafirma — это инструмент статического анализа кода Terraform, который поможет обнаружить возможные проблемы в настройках безопасности.
        Tfsec — использует статический анализ ваших шаблонов Terraform для выявления потенциальных проблем безопасности.
        Checkov — это статический анализатор кода для популярных облачных провайдеров. Поможет выявить проблемы в безопасности и соблюсти нормативные требования облачных провайдеров.
        Terratest — это фреймворк, который помогает вам писать тесты на языке GoLang. Тесты выполняют ваш Terraform-код на облачной платформе в «песочнице», а затем проверяют, что результаты соответствуют ожидаемым.